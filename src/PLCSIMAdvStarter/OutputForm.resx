<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>